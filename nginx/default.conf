##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
	charset utf-8;
	source_charset utf-8;
	server_tokens off;
	disable_symlinks off;
	client_max_body_size 50M;	

	# From php.ini: pm.max_requests = 5000
	keepalive_requests 5000;
	keepalive_timeout 60;

	# Or use Content-Security-Policy header
	add_header X-Frame-Options "SAMEORIGIN";
	add_header X-XSS-Protection "1; mode=block";
	add_header X-Content-Type-Options "nosniff";

	listen 80 default_server;
	listen [::]:80 default_server;
	
	access_log /var/log/nginx/app_access.log;
	error_log /var/log/nginx/app_error.log;

	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;
	# Selfsigned ssl
	# ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;
	# ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;

	root /var/www/html/public;
	
	# Add index.php to the list if you are using PHP
	index index.php index.html index.htm index.nginx-debian.html;

	server_name _;

	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files $uri $uri/ =404;
	}

	# pass PHP scripts to FastCGI server	
	location ~ \.php$ {
		include snippets/fastcgi-php.conf;
		# fastcgi_pass unix:/run/php/php8.2-fpm.sock;		
		fastcgi_pass 127.0.0.1:9000;        
		# Remove RUN nginx -t in Dockerfile if ypu want this
		# fastcgi_pass app:9000;
	}

	location /storage {
		location ~ \.php$ {return 403;}
	}    

	location ~ /(cache|secret|.git|vendor) {
		deny all;
		return 404;
	}

	location ~* \.(html|js|ts|css|png|jpg|jpeg|gif|webp|svg|flv|pdf|mp3|mp4|mov|xml|ico)$ {
		gzip on;
		gzip_static on;
		add_header Cache-Control 'public, no-transform';
		add_header 'Set-Cookie' '';
		fastcgi_hide_header 'Set-Cookie';
		fastcgi_hide_header 'Cookie';
		log_not_found off;
		access_log off;
		expires -1;
	}

	location = /favicon.ico { 
		access_log off; 
		log_not_found off; 
	}
	
	location = /robots.txt  { 
		access_log off; 
		log_not_found off; 
	}

	# deny access to .htaccess files, if Apache's document root concurs with nginx's one
	location ~ /\.ht {
	   deny  all;
	}
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}